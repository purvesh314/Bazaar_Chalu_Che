from .models import *from celery import shared_taskbuyTable = NonesellTable = None@shared_task()def match(company, user, bidPrice, noShares, buySell):    # buySell = True => Buy Bid    # buySell = False => Sell Bid    # Initialize    exec("global buyTable; buyTable = BuyTable_" + company.tempName)    exec("global sellTable; sellTable = SellTable_" + company.tempName)    # User Preprocessing    """    if buySell:        # Buy bid        moneyAlter(user, bidPrice * noShares, False)  # Subtract money for user        buyTable.objects.create(company=company.pk, profile=user, bidShares=noShares,                                bidPrice=bidPrice)  # Add entry to buyTable    else:        # Sell bid        u = UserShareTable.objects.filter(company=company,                                          profile=user).first()  # Get entry in userShareTable to remove shares        if noShares < u.bidShares:            # Check If selling lesser number of shares than present            u.bidShares -= noShares            u.save()        elif noShares == u.bidShares:            u.delete()        sellTable.objects.create(company=company.pk, profile=user, bidShares=noShares,                                 bidPrice=bidPrice)  # Create a sellTable Entry    """    sorted_buyTable = buyTable.objects.all().order_by('-bidPrice', 'transactionTime')  # Sort BuyTable Entries    sorted_sellTable = sellTable.objects.all().order_by('bidPrice', 'transactionTime')  # Sort SellTable Entries    if sorted_buyTable:        # If buying bids exist        i = 0  # Counter for sorted_buyTable        j = 0  # counter for sorted_sellTable        while i < len(sorted_buyTable) and (j < len(sorted_sellTable) or company.sharesLeft):            # Matching entries as long as possible            if company.sharesLeft:                            # if company has shares to sell                if not (j < len(sorted_sellTable)):                    # If sorted_sellTable is empty check for company                    if sorted_buyTable[i].bidPrice >= company.sharePrice:                        # Buy Request is greater than comapany current price                        flag = userCompanyTrasaction(company, buyTable, sorted_buyTable[                            i])  # Perform transaction for company and buying user                        i = i + (flag == 0)  # Update counter only if buyTable entry deleted                        continue                # If sorted_sellTable has entry, but company.sharePrice is lesser than sellTable entry then                # sell shares of company                elif (j < len(sorted_sellTable)) and company.sharePrice < sorted_sellTable[j].bidPrice and \                        sorted_buyTable[i].bidPrice >= company.sharePrice:                    # User Match with sorted_buyTable[i] with company shares ( company shares is least priced )                    flag = userCompanyTrasaction(company, buyTable,                                                 sorted_buyTable[i])  # Perform transaction for company and buying user                    i = i + (flag == 0)  # Update counter only if buyTable entry deleted                    continue            if (j < len(sorted_sellTable)) and sorted_sellTable and sorted_buyTable[i].bidPrice >= sorted_sellTable[                j].bidPrice:                # User Match with sorted_buyTable[i] and sorted_sellTable[j]                flag = userTransaction(company, buyTable, sellTable, sorted_buyTable[i],                                       sorted_sellTable[j])  # Perform Transaction                i = i + (flag == -1 or flag == 0)                j = j + (flag == 1 or flag == 0)                # Based on the flag if buy shares are less then buy entry is deleted and i is incremented                # Based on the flag if buy shares are more then sell entry is deleted and j is incremented                # if flag is 0 then both are entries are delted and i,j are incremented            else:                # None of the buy bids are higher than the sell bids (including company share price)                breakdef userCompanyTrasaction(company, buyTable, buyObject):    # Transaction between buying user and company    g = Global.objects.get(pk=1)    g.spread += ((buyObject.bidPrice - company.sharePrice) * min(buyObject.bidShares, company.sharesLeft))    g.save()    # Update company share price    #company.sharePrice = buyObject.bidPrice    company.sharePrice += int((min(buyObject.bidShares, company.sharesLeft)*(buyObject.bidPrice-company.sharePrice))/200)    company.save()    # get user    userBuy = Profile.objects.get(pk=buyObject.profile.pk)    try:        # Check if user already has shares of that company        # Update share table accordingly        u = UserShareTable.objects.get(profile=userBuy, company=company)        u.bidShares += min(buyObject.bidShares, company.sharesLeft)        u.save()    except:        # User does not have shares of that comapany        UserShareTable.objects.create(profile=userBuy, company=company, bidShares=min(buyObject.bidShares,company.sharesLeft))    if buyObject.bidShares <= company.sharesLeft:        # All shares of user buy object sold        UserHistory.objects.create(profile=userBuy, company=company, bidShares=buyObject.bidShares,                                   bidPrice=buyObject.bidPrice, buySell=True)        company.sharesLeft -= buyObject.bidShares  # Update company shares        company.save()        buyTable.objects.get(pk=buyObject.pk).delete()  # Delete entry from buy table        return 0    else:        # User wants to buy more shares than available        buyObject.bidShares -= company.sharesLeft  # Update number of shares in buyTable entry        buyObject.save()        # Update user history        UserHistory.objects.create(profile=userBuy, company=company, bidShares=company.sharesLeft,                                   bidPrice=buyObject.bidPrice, buySell=True)        company.sharesLeft = 0  # Update company shares        company.save()        return 1def userTransaction(company, buyTable, sellTable, buyObject, sellObject):    # Transaction between buying user and selling user    g = Global.objects.get(pk=1)    g.spread += ((buyObject.bidPrice - sellObject.bidPrice) * min(buyObject.bidShares, sellObject.bidShares))    g.save()    # Update company share price    #company.sharePrice = sellObject.bidPrice    company.sharePrice = sellObject.bidPrice        company.save()    userBuy = Profile.objects.get(pk=buyObject.profile.pk)  # Get buying user    userSell = Profile.objects.get(pk=sellObject.profile.pk)  # Get selling user    try:        # Check if user already has shares of that company        # Update share table accordingly        u = UserShareTable.objects.get(profile=userBuy, company=company)        u.bidShares += min(buyObject.bidShares, sellObject.bidShares)        u.save()    except:        # User does not have shares of that comapany        UserShareTable.objects.create(profile=userBuy, company=company,                                      bidShares=min(buyObject.bidShares, sellObject.bidShares))    #moneyAlter(userSell, sellObject.bidPrice * sellObject.bidShares, True)  # Add money to the selling users price    if buyObject.bidShares == sellObject.bidShares:        # Number of buying and selling shares are equal        # Create User History for buying user and selling user        UserHistory.objects.create(profile=userBuy, company=company, bidShares=buyObject.bidShares,                                   bidPrice=buyObject.bidPrice, buySell=True)        UserHistory.objects.create(profile=userSell, company=company, bidShares=sellObject.bidShares,                                   bidPrice=sellObject.bidPrice, buySell=False)        # Delete buyTable entries and sellTable entries        buyTable.objects.get(pk=buyObject.pk).delete()        sellTable.objects.get(pk=sellObject.pk).delete()        moneyAlter(userSell, sellObject.bidPrice * sellObject.bidShares, True)        return 0    elif buyObject.bidShares > sellObject.bidShares:        # Number of buy shares are more than number of sell shares        # Update buyTable Entry => number of shares        buyObject.bidShares -= sellObject.bidShares        buyObject.save()        # Create User History        UserHistory.objects.create(profile=userBuy, company=company, bidShares=sellObject.bidShares,                                   bidPrice=buyObject.bidPrice, buySell=True)        UserHistory.objects.create(profile=userSell, company=company, bidShares=sellObject.bidShares,                                   bidPrice=sellObject.bidPrice, buySell=False)        # Delete sellTable Entry        sellTable.objects.get(pk=sellObject.pk).delete()        moneyAlter(userSell, sellObject.bidPrice*sellObject.bidShares, True)        # Return Flag        return 1    else:        # Number of buy shares are less than number of sell shares        # Update sellTable Entry => number of shares        sellObject.bidShares -= buyObject.bidShares        sellObject.save()        # Create User History        UserHistory.objects.create(profile=userBuy, company=company, bidShares=buyObject.bidShares,                                   bidPrice=buyObject.bidPrice, buySell=True)        UserHistory.objects.create(profile=userSell, company=company, bidShares=buyObject.bidShares,                                   bidPrice=sellObject.bidPrice, buySell=False)        # Delete sellTable Entry        buyTable.objects.get(pk=buyObject.pk).delete()        moneyAlter(userSell, sellObject.bidPrice*buyObject.bidShares, True)        # return flag        return -1def moneyAlter(user, amount, addSubtract):    # addSubtract = 1 => Add money    # addSubtract = 0 => Subtract Money    cut = amount * 0.01    if addSubtract:        amount = amount - cut        user.cash = user.cash + amount    else:        amount = amount + cut        user.cash = user.cash - amount    user.save()def userRevoke(tableEntry, buySell):    # To return back money/shares after reaching threshold    # Get basic information from tableEntry    user = tableEntry.profile    company = Company.objects.get(pk=tableEntry.company)    bidPrice = tableEntry.bidPrice    noShares = tableEntry.bidShares    transactionTime = tableEntry.transactionTime    if buySell:        # If request for buy        # Return money to user        moneyAlter(user, bidPrice * noShares, True)  # Add money to user    else:        # If request for sell        # Return shares back        try:            u = UserShareTable.objects.get(company=company, profile=user)  # Get entry if exist to add shares            u.bidShares += noShares            u.save()        except:            UserShareTable.objects.create(profile=user, company=company, bidShares=noShares)